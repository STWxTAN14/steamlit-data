# -*- coding: utf-8 -*-
# pip install streamlit

import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, classification_report
# ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
file_path = "Supervised Learning Project.xlsx"
df = pd.read_excel(file_path, sheet_name="‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 1")

# ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
df.columns = df.columns.str.strip()

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å features ‡πÅ‡∏•‡∏∞ target
X = df[[
        '1. ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏î‡πÉ‡∏ô‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô IT ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?',
        '2. ‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏ô‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÉ‡∏î‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?',
        '3. ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°‡∏°‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÉ‡∏î?',
        '4. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?',
        '6. ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå IT ‡πÅ‡∏ö‡∏ö‡πÉ‡∏î‡∏ö‡πâ‡∏≤‡∏á?']]

y = df['‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏ô‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô IT?']

# ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ categorical data
le_dict = {}
for col in X.columns:
    if X[col].dtype == 'object':
        le = LabelEncoder()
        X[col] = le.fit_transform(X[col].astype(str))
        le_dict[col] = le

# ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ target
le_target = LabelEncoder()
y = le_target.fit_transform(y.astype(str))

# ‡πÅ‡∏ö‡πà‡∏á train/test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# scale ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö Neural Network
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• MLP (Neural Network) ‡πÄ‡∏ó‡∏£‡∏ô 1000 epochs
model = MLPClassifier(hidden_layer_sizes=(64, 32),
                      max_iter=1000,   # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô epochs = 1000
                      activation='relu',
                      solver='adam',
                      random_state=42)

# ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
model.fit(X_train, y_train)

# ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
y_pred = model.predict(X_test)

# ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred, target_names=le_target.classes_))


st.set_page_config(page_title="PredictIQ ", page_icon="üìä", layout="centered")
# ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà st.title("üß† PredictIQ üß†") ‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ô‡∏µ‡πâ
st.markdown(
    """
    <style>
      .center-title{
        text-align:center; font-weight:800; font-size:2rem; line-height:1.2;
      }
      .tagline{
        text-align:center; font-size:1.05rem; opacity:.85; margin-top:4px;
      }
    </style>
    <div class="center-title">üß† PredictIQ üß†</div>
    <div class="tagline">‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì ¬∑ <i>The future is in your hands.</i></div>
    """,
    unsafe_allow_html=True
)



# ---------------------------
# ‡∏ä‡πâ‡∏≠‡∏¢‡∏™‡πå‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° (‡∏Ç‡πâ‡∏≠ 1‚Äì7)
# ---------------------------

# ‡πÄ‡∏û‡∏®
gender_opts = ["‡∏ä‡∏≤‡∏¢", "‡∏´‡∏ç‡∏¥‡∏á", "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"]

# 1) ‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏î‡πÉ‡∏ô‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô IT ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?
q1_opts = [
    "‡∏Å. ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô",
    "‡∏Ç. ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢",
    "‡∏Ñ. ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Science)",
    "‡∏á. ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û (QA)",
    "‡∏à. ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à / ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö",
]

# 2) ‡∏ñ‡∏ô‡∏±‡∏î‡∏†‡∏≤‡∏©‡∏≤‡πÉ‡∏î‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?
q2_opts = ["‡∏Å. Python", "‡∏Ç. Java", "‡∏Ñ. JavaScript", "‡∏á. C/C++", "‡∏à. ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î / ‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"]

# 3) ‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°‡∏°‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÉ‡∏î?
q3_opts = ["‡∏Å. ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î", "‡∏Ç. ‡∏°‡∏≤‡∏Å", "‡∏Ñ. ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏á. ‡∏ô‡πâ‡∏≠‡∏¢", "‡∏à. ‡πÑ‡∏°‡πà‡∏ä‡∏≠‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°‡πÄ‡∏•‡∏¢"]

# 4) ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ ‡∏°‡∏±‡∏Å‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?
q4_opts = [
    "‡∏Å. ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô",
    "‡∏Ç. ‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå",
    "‡∏Ñ. ‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ",
    "‡∏á. ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô‡∏°‡∏≤‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ",
    "‡∏à. ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ",
]

# 5) ‡∏ñ‡∏ô‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏î‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?
q5_opts = [
    "‡∏Å. ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤",
    "‡∏Ç. ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö",
    "‡∏Ñ. ‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô",
    "‡∏á. ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
    "‡∏à. ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö",
]

# 6) ‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå IT ‡πÅ‡∏ö‡∏ö‡πÉ‡∏î‡∏ö‡πâ‡∏≤‡∏á?
q6_opts = [
    "‡∏Å. ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏≠‡∏õ",
    "‡∏Ç. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•/‡∏™‡∏£‡πâ‡∏≤‡∏á Dashboard",
    "‡∏Ñ. ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Script ‡∏´‡∏£‡∏∑‡∏≠ Automate ‡∏£‡∏∞‡∏ö‡∏ö",
    "‡∏á. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏π‡πÅ‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå",
    "‡∏à. ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå IT",
]

# 7) ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÉ‡∏ô‡∏™‡∏≤‡∏¢ IT (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)?
q7_opts = [
    "‡∏Å. ‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå/‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô (Web/Mobile Developer)",
    "‡∏Ç. ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (Network & Security Admin)",
    "‡∏Ñ. ‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•/‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Analyst / Data Scientist)",
    "‡∏á. ‡∏ú‡∏π‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û (QA/Test Engineer)",
]

# ---------------------------
# Rule-based predictor (‡πÄ‡∏î‡πÇ‡∏°)
# ---------------------------
CATS = [
    "Software Development",
    "Network/Security",
    "Data Science / Analytics",
    "Quality Assurance (QA)",
    "General / Undecided",
]

def predict_score(sel1, sel2, sel3, sel4, sel5, sel6, sel7):
    sc = {c: 0 for c in CATS}

    # Q1: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏´‡∏•‡∏±‡∏Å
    if sel1.startswith("‡∏Å."): sc["Software Development"] += 35
    if sel1.startswith("‡∏Ç."): sc["Network/Security"] += 35
    if sel1.startswith("‡∏Ñ."): sc["Data Science / Analytics"] += 35
    if sel1.startswith("‡∏á."): sc["Quality Assurance (QA)"] += 35
    if sel1.startswith("‡∏à."): sc["General / Undecided"] += 25

    # Q2: ‡∏†‡∏≤‡∏©‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
    if sel2.startswith("‡∏Å."): sc["Data Science / Analytics"] += 12; sc["Software Development"] += 6
    if sel2.startswith("‡∏Ç."): sc["Software Development"] += 10
    if sel2.startswith("‡∏Ñ."): sc["Software Development"] += 12
    if sel2.startswith("‡∏á."): sc["Software Development"] += 8
    if sel2.startswith("‡∏à."): sc["General / Undecided"] += 8

    # Q3: ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°
    if sel3.startswith(("‡∏Å.","‡∏Ç.")): sc["Quality Assurance (QA)"] += 8
    elif sel3.startswith("‡∏Ñ."): sc["Software Development"] += 4
    elif sel3.startswith(("‡∏á.","‡∏à.")): sc["General / Undecided"] += 5

    # Q4: ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    if sel4.startswith("‡∏Å."): sc["Data Science / Analytics"] += 8; sc["Software Development"] += 6
    if sel4.startswith("‡∏Ç."): sc["Quality Assurance (QA)"] += 6
    if sel4.startswith("‡∏Ñ."): sc["Network/Security"] += 6
    if sel4.startswith("‡∏á."): sc["General / Undecided"] += 4
    if sel4.startswith("‡∏à."): sc["General / Undecided"] += 8

    # Q5: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î
    if sel5.startswith("‡∏Å."): sc["Data Science / Analytics"] += 12
    if sel5.startswith("‡∏Ç."): sc["Software Development"] += 12
    if sel5.startswith("‡∏Ñ."): sc["Quality Assurance (QA)"] += 10
    if sel5.startswith("‡∏á."): sc["Data Science / Analytics"] += 10
    if sel5.startswith("‡∏à."): sc["Software Development"] += 12

    # Q6: ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
    if sel6.startswith("‡∏Å."): sc["Software Development"] += 10
    if sel6.startswith("‡∏Ç."): sc["Data Science / Analytics"] += 10
    if sel6.startswith("‡∏Ñ."): sc["Network/Security"] += 8
    if sel6.startswith("‡∏á."): sc["Quality Assurance (QA)"] += 10
    if sel6.startswith("‡∏à."): sc["General / Undecided"] += 6

    # Q7: ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if sel7.startswith("‡∏Å."): sc["Software Development"] += 6
    if sel7.startswith("‡∏Ç."): sc["Network/Security"] += 6
    if sel7.startswith("‡∏Ñ."): sc["Data Science / Analytics"] += 6
    if sel7.startswith("‡∏á."): sc["Quality Assurance (QA)"] += 6

    for k in sc: sc[k] = min(100, sc[k])
    best_cat, best_score = max(sc.items(), key=lambda x: x[1])
    top3 = sorted(sc.items(), key=lambda x: x[1], reverse=True)[:3]
    top3_str = ", ".join([f"{k} ({v}%)" for k, v in top3])
    return best_cat, best_score, sc, top3_str

# ---------------------------
# ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏£‡∏≠‡∏Å (‡∏Ç‡πâ‡∏≠ 1‚Äì7 default ‡πÄ‡∏õ‡πá‡∏ô "-")
# ---------------------------
with st.form("it_form"):
    name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠ *")
    age  = st.number_input("‡∏≠‡∏≤‡∏¢‡∏∏ *", min_value=0, max_value=120, value=20, step=1)
    gender = st.selectbox("‡πÄ‡∏û‡∏® *", ["‡∏ä‡∏≤‡∏¢", "‡∏´‡∏ç‡∏¥‡∏á", "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"], index=0)

    st.subheader("You can choose your future.")
    sel1 = st.selectbox("1) ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏î‡πÉ‡∏ô‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô IT ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î? *", ["-"] + q1_opts, index=0)
    sel2 = st.selectbox("2) ‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏ô‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÉ‡∏î‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î? *", ["-"] + q2_opts, index=0)
    sel3 = st.selectbox("3) ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°‡∏°‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÉ‡∏î? *", ["-"] + q3_opts, index=0)
    sel4 = st.selectbox("4) ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£? *", ["-"] + q4_opts, index=0)
    sel5 = st.selectbox("5) ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏î‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î? *", ["-"] + q5_opts, index=0)
    sel6 = st.selectbox("6) ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå IT ‡πÅ‡∏ö‡∏ö‡πÉ‡∏î‡∏ö‡πâ‡∏≤‡∏á? *", ["-"] + q6_opts, index=0)
    sel7 = st.selectbox("7) ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏ô‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô IT? (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) *", ["-"] + q7_opts, index=0)

    submitted = st.form_submit_button("üëâPredictüëà")

if submitted:
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡πÑ‡∏´‡∏ô‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô "-" ‡∏≠‡∏¢‡∏π‡πà
    pending = [i for i, s in enumerate([sel1,sel2,sel3,sel4,sel5,sel6,sel7], start=1) if s == "-"]
    if not name or age is None:
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å '‡∏ä‡∏∑‡πà‡∏≠' ‡πÅ‡∏•‡∏∞ '‡∏≠‡∏≤‡∏¢‡∏∏' ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö")
    elif pending:
        st.warning(f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {', '.join(map(str, pending))})")
    else:
        best_cat, best_score, all_scores, top3 = predict_score(sel1, sel2, sel3, sel4, sel5, sel6, sel7)
        
        feature_cols = [
            '1. ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏î‡πÉ‡∏ô‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô IT ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?',
        '2. ‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏ô‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÉ‡∏î‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?',
        '3. ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°‡∏°‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÉ‡∏î?',
        '4. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?',
        '6. ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå IT ‡πÅ‡∏ö‡∏ö‡πÉ‡∏î‡∏ö‡πâ‡∏≤‡∏á?'
             ]
        tan = pd.DataFrame([[
        sel1, sel2, sel3, sel4, sel6
        ]], columns=feature_cols)

        tan = tan[[
        '1. ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏î‡πÉ‡∏ô‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô IT ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?',
        '2. ‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏ô‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÉ‡∏î‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?',
        '3. ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°‡∏°‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÉ‡∏î?',
        '4. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?',
        '6. ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå IT ‡πÅ‡∏ö‡∏ö‡πÉ‡∏î‡∏ö‡πâ‡∏≤‡∏á?']]
    
        le_dict = {}
        for col in tan.columns:
            if tan[col].dtype == 'object':
                le = LabelEncoder()
                tan[col] = le.fit_transform(tan[col].astype(str))
                le_dict[col] = le
        train = model.predict(tan)

        if train == 0:
            st.success("Web/Mobile Developer")
        elif train ==1:
            st.success("Network & Security Admin")
        elif train ==2:
            st.success("Data Scientist")
        elif train ==3:
            st.success("QA/Test Engineer")
        
        st.write(
            {
                "‡∏ä‡∏∑‡πà‡∏≠": name,
                "‡∏≠‡∏≤‡∏¢‡∏∏": age,
                "‡πÄ‡∏û‡∏®": gender,
                "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô": best_cat,
                "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô(%)": best_score,
                "Top3": top3,
            }
        )
        st.progress(best_score / 100.0)
